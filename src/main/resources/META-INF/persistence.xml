<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.1" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
<!--
    The persistence unit (pu) to be used to connect to a Derby Embedded database. En embedded database
    is really just a file-system, not a running server, but you interact with the embedded database
    in the same way you would a RDB-server.
    Note that using an embedded database should only be used when there never is more than one
    application (client) accessing the database.
     -->
<persistence-unit name="patientsdb" transaction-type="RESOURCE_LOCAL">
    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
    <class>no.ntnu.idatg2001.mappe_2_hospital.components.Patient</class>
<properties>
    <property name="jakarta.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
    <property name="jakarta.persistence.jdbc.url" value="jdbc:mysql://mysql-ait.stud.idi.ntnu.no/sanderob"/>
    <property name="jakarta.persistence.jdbc.user" value="sanderob"/>
    <property name="jakarta.persistence.jdbc.password" value="GquTVGlR"/>
    <property name="eclipselink.target-database" value="MySQL"/>
    <!--  Alternatives: create-tables, drop-and-create-tables -->
    <property name="eclipselink.ddl-generation" value="create-tables"/>
    <property name="eclipselink.ddl-generation.output-mode" value="database"/>
    <!--  Alternatives: FINE (logs all SQL), ALL, CONFIG, INFO, WARNING..., OFF  -->
    <property name="eclipselink.logging.level" value="OFF"/>
    <!--
                 The Database can be pre-filled with entries during startup. This would be very useful during testing
                 of the application, used in conjunction with "drop-and-create-tables". The SQL-statements for inserting
                 entries in the db-table can be stored in a text-file. The line below, when un-commented, will
                 read SQL-statements from the file "META-INF/sql/data.sql" during application startup.
                  -->
    <!-- property name="javax.persistence.sql-load-script-source" value="META-INF/sql/data.sql"/ -->
</properties>
</persistence-unit>
</persistence>